const openai = require('../config/openai');
const { scrapeInfo } = require('./scraperService');

const respuestasPredefinidas = {
  "examen de admisi√≥n": `REQUISITOS PARA EL EXAMEN DE ADMISI√ìN:

1. Documentos necesarios:
   - CURP
   - Acta de nacimiento
   - Certificado de bachillerato
   - Identificaci√≥n oficial
   - Comprobante de domicilio
   - 2 fotograf√≠as tama√±o infantil

2. Proceso:
   - Realizar el pago del examen
   - Presentar los documentos en control escolar
   - Asistir el d√≠a del examen con 30 minutos de anticipaci√≥n
   - Llevar l√°piz, pluma y calculadora

3. Fechas importantes:
   - El examen se realiza en junio y enero
   - Las inscripciones son un mes antes
   - Los resultados se publican 15 d√≠as despu√©s

Para m√°s informaci√≥n, visita la p√°gina web del instituto o acude a control escolar.`,

  "inscripci√≥n": `PROCESO DE INSCRIPCI√ìN:

1. Requisitos:
   - Haber aprobado el examen de admisi√≥n
   - CURP
   - Acta de nacimiento
   - Certificado de bachillerato
   - Identificaci√≥n oficial
   - Comprobante de domicilio
   - 6 fotograf√≠as tama√±o infantil
   - Formato universal de pago

2. Pasos:
   - Realizar el pago de inscripci√≥n
   - Presentar documentos en control escolar
   - Asistir a la ceremonia de bienvenida
   - Tomar la foto para credencial

3. Fechas:
   - Julio para el semestre de agosto
   - Enero para el semestre de febrero

Para m√°s detalles, visita control escolar.`,

  "carreras": `CARRERAS DISPONIBLES:

1. Ingenier√≠a en Sistemas Computacionales
   - Duraci√≥n: 8 semestres
   - Modalidad: Escolarizada
   - Turno: Matutino

2. Ingenier√≠a en Gesti√≥n Empresarial
   - Duraci√≥n: 8 semestres
   - Modalidad: Escolarizada
   - Turno: Matutino

3. Ingenier√≠a en Industrias Alimentarias
   - Duraci√≥n: 8 semestres
   - Modalidad: Escolarizada
   - Turno: Matutino

4. Ingenier√≠a en Desarrollo Comunitario
   - Duraci√≥n: 8 semestres
   - Modalidad: Escolarizada
   - Turno: Matutino

Para m√°s informaci√≥n sobre cada carrera, visita la p√°gina web del instituto.`
};

const generateResponse = async (pregunta) => {
  try {
    console.log('üîÑ Iniciando generaci√≥n de respuesta para:', pregunta);

    try {
      const completion = await openai.chat.completions.create({
        model: "gpt-3.5-turbo",
        messages: [
          {
            role: "system",
            content: `Eres un asistente virtual especializado del Tecnol√≥gico de Estudios Superiores de San Felipe del Progreso. 
            Tu funci√≥n es proporcionar informaci√≥n precisa y √∫til sobre:
            - Tr√°mites y requisitos de inscripci√≥n
            - Oferta educativa y carreras
            - Procesos de admisi√≥n
            - Servicios estudiantiles
            - Calendario escolar
            - Becas y apoyos
            
            Instrucciones espec√≠ficas:
            1. Mant√©n un tono profesional pero amigable
            2. Si no est√°s seguro de una respuesta, ind√≠calo claramente
            3. Proporciona informaci√≥n detallada y estructurada
            4. Incluye fechas y requisitos espec√≠ficos cuando sea relevante
            5. Si la pregunta es muy general, pide m√°s detalles
            6. Siempre menciona que la informaci√≥n puede estar sujeta a cambios
            
            Formato de respuesta:
            - Usa t√≠tulos en may√∫sculas para secciones importantes
            - Enumera los requisitos y pasos cuando sea apropiado
            - Destaca informaci√≥n importante en negrita
            - Proporciona ejemplos cuando sea √∫til`
          },
          {
            role: "user",
            content: pregunta
          }
        ],
        temperature: 0.5,
        max_tokens: 800,
        presence_penalty: 0.6,
        frequency_penalty: 0.3
      });

      console.log('‚úÖ Respuesta generada exitosamente con OpenAI');
      return completion.choices[0].message.content;
    } catch (openaiError) {
      console.error('‚ùå Error con OpenAI:', openaiError);
      
      // Verificar si es un error de l√≠mite excedido
      if (openaiError.message.includes('quota') || openaiError.message.includes('rate limit')) {
        console.log('‚ö†Ô∏è L√≠mite de OpenAI excedido, usando scraping como respaldo');
        const respuestaScraping = await scrapeInfo(pregunta);
        return `${respuestaScraping}\n\n[Nota: Esta informaci√≥n fue obtenida directamente del sitio web del instituto debido a que se excedi√≥ el l√≠mite de la API de OpenAI. Para informaci√≥n m√°s detallada, visita la p√°gina web del instituto.]`;
      }
      
      throw openaiError;
    }
  } catch (error) {
    console.error('‚ùå Error detallado:', {
      message: error.message,
      code: error.code,
      type: error.type,
      status: error.status
    });

    return "Lo siento, ha ocurrido un error al procesar tu pregunta. Por favor, intenta de nuevo o contacta a soporte t√©cnico.";
  }
};

module.exports = {
  generateResponse
}; 